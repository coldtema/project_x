import math
import time
import cloudscraper
import json
from django.utils import timezone
from django.db import transaction
from django.db.models import Prefetch
from apps.accounts.models import CustomUser
from apps.wb_checker.utils.general_utils import time_count
from ..models import WBPrice, WBDetailedInfo, WBProduct
from apps.core.models import Notification
from apps.core import tasks



class PriceUpdater:
    def __init__(self):
        '''–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤'''
        self.batch_size = 50
        self.len_all_authors_list = CustomUser.objects.all().count()
        self.batched_authors_list = []
        self.scraper = cloudscraper.create_scraper()
        self.headers = {"User-Agent": "Mozilla/5.0"}
        self.new_prices = []
        self.updated_details = []
        self.test_counter = 0
        self.current_detail_to_check = None
        self.detail_product_url_api = None
        self.prods_artikuls_to_delete = []
        self.notifications_to_save = []
    
    def run(self):
        '''–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω + –±–∞—Ç—á–∏–Ω–≥ –ø–æ –∞–≤—Ç–æ—Ä–∞–º'''
        for i in range(math.ceil(self.len_all_authors_list / self.batch_size)):
            self.batched_authors_list = CustomUser.objects.all().prefetch_related(Prefetch('wbdetailedinfo_set', 
                                                                            queryset=WBDetailedInfo.objects.filter(enabled=True).select_related('product')))[i*self.batch_size:(i+1)*self.batch_size]
            self.go_through_all_authors()
            self.save_update_prices()
            self.send_tg_notifications()
            self.new_prices = []
            self.updated_details = []
            self.prods_artikuls_to_delete = []
            self.notifications_to_save = []
        print(f'–¢–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ:{self.test_counter}')


    def go_through_all_authors(self):
        '''–§—É–Ω–∫—Ü–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π –∏–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥ –ø–æ –æ–¥–Ω–æ–º—É –∞–≤—Ç–æ—Ä—É –∏–∑ –±–∞—Ç—á–∞'''
        for i in range(len(self.batched_authors_list)):
            author_object = self.batched_authors_list[i]
            self.detail_product_url_api = f'https://card.wb.ru/cards/v2/detail?appType=1&curr=rub&dest={author_object.dest_id}&spp=30&ab_testing=false&lang=ru&nm='
            details_of_prods_to_check = self.batched_authors_list[i].wbdetailedinfo_set.all()
            if len(details_of_prods_to_check) == 0:
                continue
            self.go_through_all_details(details_of_prods_to_check)


    def go_through_all_details(self, details_of_prods_to_check):
        '''–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã'''
        for j in range(math.ceil(len(details_of_prods_to_check) / 200)):
            self.batched_details_of_prods_to_check = details_of_prods_to_check[j*200:(j+1)*200]
            final_url = self.detail_product_url_api + ';'.join(map(lambda x: str(x.product.artikul), self.batched_details_of_prods_to_check))
            response = self.scraper.get(final_url, headers=self.headers)
            json_data = json.loads(response.text)
            products_on_page = json_data['data']['products']

            if len(products_on_page) != len(self.batched_details_of_prods_to_check):
                self.delete_not_existing_prods(products_on_page)


            products_on_page = sorted(products_on_page, key=lambda x: x['id'])
            self.batched_details_of_prods_to_check = sorted(self.batched_details_of_prods_to_check, key=lambda x: x.product.artikul)
            self.update_info(products_on_page)




    
    def update_info(self, products_on_page):
        '''–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –Ω–∞–ª–∏—á–∏–∏ + 
        —Ä–∞–∑–≤–µ–¥–µ–Ω–∏–µ –ø–æ —Ç–µ–º, —É –∫–æ–≥–æ –µ—Å—Ç—å —Ä–∞–∑–º–µ—Ä, –∏ —Ç–µ–º, —É –∫–æ–≥–æ –Ω–µ—Ç'''
        for j in range(len(products_on_page)):
            self.current_detail_to_check = self.batched_details_of_prods_to_check[j]
            if products_on_page[j]['id'] == self.current_detail_to_check.product.artikul:
                if self.current_detail_to_check.size == None:
                    self.check_nonsize_product(products_on_page[j])
                else:
                    self.check_size_product(products_on_page[j])                      
            else: #–ø–æ —Ñ–∞–∫—Ç—É –¥–æ —ç—Ç–æ–≥–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –¥–æ—Ö–æ–¥–∏—Ç—å (–æ—Å—Ç–∞–≤–∏–ª –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                print(products_on_page[j]['id'])
                print(self.current_detail_to_check.product.artikul)
                print('–ù–µ —Å—Ö–æ–¥–∏—Ç—Å—è —Ç–æ–≤–∞—Ä –∏ –∑–∞–ø—Ä–æ—Å –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º')
                raise Exception



    def delete_not_existing_prods(self, products_on_page):
        '''–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–æ–±—â–µ
          —É–¥–∞–ª–∏–ª–∏—Å—å —Å —Å–∞–π—Ç–∞ wb –∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ api details'''
        prods_artikuls_to_delete = set(map(lambda x: x.product.artikul, self.batched_details_of_prods_to_check)) - set(map(lambda x: x['id'], products_on_page))
        self.prods_artikuls_to_delete.extend(prods_artikuls_to_delete)
        self.batched_details_of_prods_to_check = list(filter(lambda x: True if x.product.artikul not in prods_artikuls_to_delete else False, self.batched_details_of_prods_to_check))



    def check_nonsize_product(self, product_on_page):
        '''–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç —Ä–∞–∑–º–µ—Ä–∞'''
        self.test_counter += 1
        stocks = product_on_page['sizes'][0]['stocks']
        if len(stocks) != 0:
            volume = 0
            for stock in stocks:
                volume += stock['qty']
            price_of_detail = int(product_on_page['sizes'][0]['price']['product'] // 100)
            #—Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.updating_plus_notification(price_of_detail, volume)
        else:
            self.disable_product()
            


    def disable_product(self):
        '''–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Ç–∫ –µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏)'''
        self.notifications_to_save.append(Notification(text=f'<i>üõíWildBerries</i> <br> <b>üì¶{self.current_detail_to_check.product.name}</b> <br> <b> ‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏! </b>  –î–æ–±–∞–≤–ª–µ–Ω –≤–æ –≤–∫–ª–∞–¥–∫—É "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏".',
                                                        tg_text=f'<i>üõíWildBerries</i>\n<a href="{self.current_detail_to_check.product.url}"><b>üì¶{self.current_detail_to_check.product.name}</b></a>\n<b> ‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏! </b>',
                                                        wb_product=self.current_detail_to_check,
                                                        user=self.current_detail_to_check.author))
        self.current_detail_to_check.enabled = False
        self.current_detail_to_check.volume = 0
        self.updated_details.append(self.current_detail_to_check)   



    def check_size_product(self, product_on_page):
        '''–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å —Ä–∞–∑–º–µ—Ä'''
        self.test_counter += 1
        sizes = product_on_page['sizes']
        for size in sizes:
            if size['origName'] == self.current_detail_to_check.size:
                stocks = size['stocks']
                if len(stocks) != 0:
                    volume = 0
                    for stock in stocks:
                        volume += stock['qty']
                    price_of_detail = size['price']['product'] // 100
                    #—Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    self.updating_plus_notification(price_of_detail, volume)
                break      



    def updating_plus_notification(self, price_of_detail, volume):
        '''–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π —Ç–æ–≤–∞—Ä–∞
        –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –æ–±—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'''
        flag_change = False           
        if self.current_detail_to_check.latest_price != price_of_detail: #and abs(self.current_detail_to_check.latest_price - price_of_detail) /self.current_detail_to_check.latest_price > 0.03: #—Å–¥–µ–ª–∞—Ç—å –ø–æ—Ç–æ–º –ø–æ–ª–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞ —Å–∫–æ–ª—å–∫–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ü–µ–Ω—É)
            # print(abs(self.current_detail_to_check.latest_price - price_of_detail) /self.current_detail_to_check.latest_price)
            self.make_notification(price_of_detail)
            flag_change = True
            self.current_detail_to_check.latest_price = price_of_detail
            self.current_detail_to_check.updated = timezone.now()
            self.new_prices.append(WBPrice(price=price_of_detail,
                                        added_time=timezone.now(),
                                        detailed_info=self.current_detail_to_check))
        if self.current_detail_to_check.volume != volume: #–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è - –ø—Ä–æ—Å—Ç–æ –ø–∏—à—É –≤ –±–¥ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ø–æ–∫–∞ —á—Ç–æ)
            if self.current_detail_to_check.volume >= 10 and volume < 10:
                self.notifications_to_save.append(Notification(text=f'<i>üõíWildBerries</i> <br> <b>üì¶{self.current_detail_to_check.product.name}</b> <br>  ‚ùóÔ∏è<b>–ú–µ–Ω–µ–µ 10 —à—Ç—É–∫ –≤ –Ω–∞–ª–∏—á–∏–∏!</b> –£—Å–ø–µ–π—Ç–µ –∫—É–ø–∏—Ç—å :)',
                                                               tg_text=f'<i>üõíWildBerries</i>\n<a href="{self.current_detail_to_check.product.url}"><b>üì¶{self.current_detail_to_check.product.name}</b></a>\n‚ùóÔ∏è<b>–ú–µ–Ω–µ–µ 10 —à—Ç—É–∫ –≤ –Ω–∞–ª–∏—á–∏–∏!</b> –£—Å–ø–µ–π—Ç–µ –∫—É–ø–∏—Ç—å :)',
                                                                wb_product=self.current_detail_to_check,
                                                                user=self.current_detail_to_check.author))
            flag_change = True
            self.current_detail_to_check.volume = volume
        if flag_change: self.updated_details.append(self.current_detail_to_check) 


    def make_notification(self, price_of_detail):
        if abs(self.current_detail_to_check.latest_price - price_of_detail) > self.current_detail_to_check.author.notification_discount_price or abs(int((self.current_detail_to_check.latest_price-price_of_detail)/(self.current_detail_to_check.latest_price/100))) > self.current_detail_to_check.author.notification_discount:
            if self.current_detail_to_check.latest_price > price_of_detail and self.current_detail_to_check.author.pricedown_notification is True:
                self.current_detail_to_check.last_notified_price = price_of_detail
                self.notifications_to_save.append(Notification(text=f'<i>üõíWildBerries</i> <br> <b>üì¶{self.current_detail_to_check.product.name}</b> <br> üü¢ –¶–µ–Ω–∞ <b>—É–ø–∞–ª–∞</b> –Ω–∞ <b>{self.current_detail_to_check.latest_price - price_of_detail} ‚ÇΩ</b>! (-{int((self.current_detail_to_check.latest_price-price_of_detail)/(self.current_detail_to_check.latest_price/100))}%)',
                                                                tg_text=f'<i>üõíWildBerries</i>\n<a href="{self.current_detail_to_check.product.url}"><b>üì¶{self.current_detail_to_check.product.name}</b></a>\nüü¢ –¶–µ–Ω–∞ <b>—É–ø–∞–ª–∞</b> –Ω–∞ <b>{self.current_detail_to_check.latest_price - price_of_detail} ‚ÇΩ</b>! (-{int((self.current_detail_to_check.latest_price-price_of_detail)/(self.current_detail_to_check.latest_price/100))}%)',
                                                                wb_product=self.current_detail_to_check,
                                                                user=self.current_detail_to_check.author))
            elif self.current_detail_to_check.author.priceup_notification is True:
                self.current_detail_to_check.last_notified_price = price_of_detail
                self.notifications_to_save.append(Notification(text=f'<i>üõíWildBerries</i> <br> <b>üì¶{self.current_detail_to_check.product.name}</b> <br> üî¥ –¶–µ–Ω–∞ <b>–ø–æ–¥–Ω—è–ª–∞—Å—å</b> –Ω–∞ <b> {price_of_detail - self.current_detail_to_check.latest_price} ‚ÇΩ</b>! (+{int((price_of_detail-self.current_detail_to_check.latest_price)/(self.current_detail_to_check.latest_price/100))}%)',
                                                                tg_text=f'<i>üõíWildBerries</i>\n<a href="{self.current_detail_to_check.product.url}"><b>üì¶{self.current_detail_to_check.product.name}</b></a>\nüî¥ –¶–µ–Ω–∞ <b>–ø–æ–¥–Ω—è–ª–∞—Å—å</b> –Ω–∞ <b> {price_of_detail - self.current_detail_to_check.latest_price} ‚ÇΩ</b>! (+{int((price_of_detail-self.current_detail_to_check.latest_price)/(self.current_detail_to_check.latest_price/100))}%)',
                                                                wb_product=self.current_detail_to_check,
                                                                user=self.current_detail_to_check.author))


    
    @transaction.atomic
    def save_update_prices(self):
        '''–ó–∞–Ω–µ—Å–µ–Ω–∏–µ –≤ –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è'''
        WBDetailedInfo.objects.bulk_update(self.updated_details, ['latest_price', 'volume', 'enabled', 'updated', 'last_notified_price'])
        WBPrice.objects.bulk_create(self.new_prices)
        WBProduct.objects.filter(artikul__in=self.prods_artikuls_to_delete).delete()
        Notification.objects.bulk_create(self.notifications_to_save)



    def send_tg_notifications(self):
        for notif in self.notifications_to_save:
            if notif.user.tg_user:
                tasks.send_tg_notification.delay(notif.user.tg_user.tg_id, notif.tg_text)









class AvaliabilityUpdater:
    def __init__(self):
        '''–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤'''
        self.batch_size = 50
        self.len_all_authors_list = CustomUser.objects.all().count()
        self.batched_authors_list = []
        self.scraper = cloudscraper.create_scraper()
        self.headers = {"User-Agent": "Mozilla/5.0"}
        self.new_prices = []
        self.updated_details = []
        self.test_counter = 0
        self.current_detail_to_check = None
        self.detail_product_url_api = None
        self.prods_artikuls_to_delete = []
        self.notifications_to_save = []


    def run(self):
        '''–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω + –±–∞—Ç—á–∏–Ω–≥ –ø–æ –∞–≤—Ç–æ—Ä–∞–º'''
        for i in range(math.ceil(self.len_all_authors_list / self.batch_size)):
            self.batched_authors_list = CustomUser.objects.all().prefetch_related(Prefetch('wbdetailedinfo_set', 
                                                                            queryset=WBDetailedInfo.objects.filter(enabled=False).select_related('product')))[i*self.batch_size:(i+1)*self.batch_size]
            self.go_through_all_authors()     
            self.save_update_avaliability()
            self.send_tg_notifications()
            self.new_prices = []
            self.updated_details = []
            self.prods_artikuls_to_delete = []
            self.notifications_to_save = []
        print(f'–¢–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ:{self.test_counter}')



    def go_through_all_authors(self):
        '''–§—É–Ω–∫—Ü–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π –∏–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥ –ø–æ –æ–¥–Ω–æ–º—É –∞–≤—Ç–æ—Ä—É –∏–∑ –±–∞—Ç—á–∞'''
        for i in range(len(self.batched_authors_list)):
            author_object = self.batched_authors_list[i]
            self.detail_product_url_api = f'https://card.wb.ru/cards/v2/detail?appType=1&curr=rub&dest={author_object.dest_id}&spp=30&ab_testing=false&lang=ru&nm='
            details_of_prods_to_check = self.batched_authors_list[i].wbdetailedinfo_set.all()
            if len(details_of_prods_to_check) == 0:
                continue
            self.go_through_all_details(details_of_prods_to_check)


    def go_through_all_details(self, details_of_prods_to_check):
        '''–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã'''
        for j in range(math.ceil(len(details_of_prods_to_check) / 200)):
            self.batched_details_of_prods_to_check = details_of_prods_to_check[j*200:(j+1)*200]
            final_url = self.detail_product_url_api + ';'.join(map(lambda x: str(x.product.artikul), self.batched_details_of_prods_to_check))
            response = self.scraper.get(final_url, headers=self.headers)
            json_data = json.loads(response.text)
            products_on_page = json_data['data']['products']

            if len(products_on_page) != len(self.batched_details_of_prods_to_check):
                self.delete_not_existing_prods(products_on_page)


            products_on_page = sorted(products_on_page, key=lambda x: x['id'])
            self.batched_details_of_prods_to_check = sorted(self.batched_details_of_prods_to_check, key=lambda x: x.product.artikul)
            self.update_avaliability(products_on_page)



    def delete_not_existing_prods(self, products_on_page):
        '''–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–æ–±—â–µ
          —É–¥–∞–ª–∏–ª–∏—Å—å —Å —Å–∞–π—Ç–∞ wb –∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ api details'''
        prods_artikuls_to_delete = set(map(lambda x: x.product.artikul, self.batched_details_of_prods_to_check)) - set(map(lambda x: x['id'], products_on_page))
        self.prods_artikuls_to_delete.extend(prods_artikuls_to_delete)
        self.batched_details_of_prods_to_check = list(filter(lambda x: True if x.product.artikul not in prods_artikuls_to_delete else False, self.batched_details_of_prods_to_check))



    
    def update_avaliability(self, products_on_page):
        '''–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –Ω–µ –≤ –Ω–∞–ª–∏—á–∏–∏ –≤ –ë–î + 
        —Ä–∞–∑–≤–µ–¥–µ–Ω–∏–µ –ø–æ —Ç–µ–º, —É –∫–æ–≥–æ –µ—Å—Ç—å —Ä–∞–∑–º–µ—Ä, –∏ —Ç–µ–º, —É –∫–æ–≥–æ –Ω–µ—Ç'''
        for j in range(len(products_on_page)):
            self.current_detail_to_check = self.batched_details_of_prods_to_check[j]
            if products_on_page[j]['id'] == self.current_detail_to_check.product.artikul: #–ø–æ —Ö–æ—Ä–æ—à–µ–º—É –≤–æ—Ç —Ç—É—Ç –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–∫–æ–µ —Ç–æ
                if self.current_detail_to_check.size == None:
                    self.check_nonsize_product(products_on_page[j])
                else:
                    self.check_size_product(products_on_page[j])                      
            else:
                print('–ù–µ —Å—Ö–æ–¥–∏—Ç—Å—è —Ç–æ–≤–∞—Ä –∏ –∑–∞–ø—Ä–æ—Å –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º')



    def check_nonsize_product(self, product_on_page):
        '''–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç —Ä–∞–∑–º–µ—Ä–∞'''
        self.test_counter += 1
        stocks = product_on_page['sizes'][0]['stocks']
        if len(stocks) != 0:
            #—Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–æ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –≤ –Ω–∞–ª–∏—á–∏–∏
            volume = 0
            for stock in stocks:
                volume += stock['qty']
            price_of_detail = product_on_page['sizes'][0]['price']['product'] // 100
            #–ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç—É—Ç –Ω—É–∂–Ω–æ –Ω–∞ —Ä–∞–∑–Ω–∏—Ü—É —Ü–µ–Ω—ã –¥–æ "–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏" –∏ –ø–æ—Å–ª–µ
            self.enable_product(price_of_detail, volume)
            



    def check_size_product(self, product_on_page):
        '''–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å —Ä–∞–∑–º–µ—Ä'''
        self.test_counter += 1
        sizes = product_on_page['sizes']
        for size in sizes:
            if size['origName'] == self.current_detail_to_check.size:
                stocks = size['stocks']
                if len(stocks) != 0:
                    #—Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–æ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –≤ –Ω–∞–ª–∏—á–∏–∏
                    volume = 0
                    for stock in stocks:
                        volume += stock['qty']
                    price_of_detail = size['price']['product'] // 100
                    self.enable_product(price_of_detail, volume) #–¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—é –ø–æ —Ä–∞–∑–º–µ—Ä—É (–≤–¥—Ä—É–≥ –µ–≥–æ –Ω–µ –±—ã–ª–æ –≤ –Ω–∞–ª–∏—á–∏–∏)
                break                      
                


    def enable_product(self, price_of_detail, volume):
        '''–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π —Ç–æ–≤–∞—Ä–∞
        –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –æ–±—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'''
        if int(self.current_detail_to_check.first_price) == 0:
            self.current_detail_to_check.first_price = price_of_detail
        self.current_detail_to_check.latest_price = price_of_detail
        self.current_detail_to_check.volume = volume
        self.current_detail_to_check.enabled = True
        self.current_detail_to_check.updated = timezone.now()
        self.updated_details.append(self.current_detail_to_check)
        self.new_prices.append(WBPrice(price=price_of_detail,
                                        added_time=timezone.now(),
                                        detailed_info=self.current_detail_to_check))
        self.notifications_to_save.append(Notification(text=f'<i>üõíWildBerries</i> <br> <b>üì¶{self.current_detail_to_check.product.name}</b> <br> <b> ‚úÖ –ü–æ—è–≤–∏–ª—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏! </b> –£—Å–ø–µ–π—Ç–µ –∫—É–ø–∏—Ç—å!',
                                                        tg_text=f'<i>üõíWildBerries</i>\n<a href="{self.current_detail_to_check.product.url}"><b>üì¶{self.current_detail_to_check.product.name}</b></a>\n<b> ‚úÖ –ü–æ—è–≤–∏–ª—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏! </b> –£—Å–ø–µ–π—Ç–µ –∫—É–ø–∏—Ç—å!',                
                                                        wb_product=self.current_detail_to_check,
                                                        user=self.current_detail_to_check.author))
        

    def make_deletion_notification(self):
        prods_to_delete =  WBProduct.objects.filter(artikul__in=self.prods_artikuls_to_delete).prefetch_related('wbdetailedinfo_set')
        for prod in prods_to_delete:
            if prod.wbdetailedinfo_set.exists():
                for detailed_info in prod.wbdetailedinfo_set:
                    self.notifications_to_save.append(Notification(text=f'<i>üõíWildBerries</i> <br> <b>üì¶{detailed_info.name}</b> <br> <b> ‚ùóÔ∏è–ë–æ–ª—å—à–µ –Ω–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ WB.</b> <br> –ù–∞–º –ø—Ä–∏—à–ª–æ—Å—å –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å. –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                                                                   tg_text=f'<i>üõíWildBerries</i>\n<a href="{detailed_info.product.url}"><b>üì¶{detailed_info.name}</b></a>\n<b> ‚ùóÔ∏è–ë–æ–ª—å—à–µ –Ω–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ WB.</b>\n–ù–∞–º –ø—Ä–∏—à–ª–æ—Å—å –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å. –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                                                                        additional_link = prod.url,
                                                                        user=detailed_info.author))


    
    @transaction.atomic
    def save_update_avaliability(self):
        '''–ó–∞–Ω–µ—Å–µ–Ω–∏–µ –≤ –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è'''
        WBDetailedInfo.objects.bulk_update(self.updated_details, ['latest_price', 'volume', 'enabled', 'updated', 'first_price'])
        WBPrice.objects.bulk_create(self.new_prices)
        WBProduct.objects.filter(artikul__in=self.prods_artikuls_to_delete).delete()
        Notification.objects.bulk_create(self.notifications_to_save)


    def send_tg_notifications(self):
        for notif in self.notifications_to_save:
            if notif.user.tg_user:
                tasks.send_tg_notification.delay(notif.user.tg_user.tg_id, notif.tg_text)



class WBPriceClearer:
    def __init__(self):
        '''–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤'''
        self.batch_size = 1000
        self.len_all_details_list = WBDetailedInfo.objects.all().count()
        self.batched_details_list = []
        self.wbprice_ids_to_delete = []


    def run(self):
        '''–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö —Ü–µ–Ω + –±–∞—Ç—á–∏–Ω–≥ –ø–æ –∞–≤—Ç–æ—Ä–∞–º'''
        for i in range(math.ceil(self.len_all_details_list / self.batch_size)):
            self.batched_details_list = WBDetailedInfo.objects.all().prefetch_related('wbprice_set')[i*self.batch_size:(i+1)*self.batch_size]
            self.go_through_all_details()     
            self.delete_notif_in_db()
            self.wbprice_ids_to_delete = []


    def go_through_all_details(self):
        '''–§—É–Ω–∫—Ü–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π –∏–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥ –ø–æ –æ–¥–Ω–æ–π –¥–µ—Ç–∞–ª–∏ –∏–∑ –±–∞—Ç—á–∞'''
        for i in range(len(self.batched_details_list)):
            if self.batched_details_list[i].wbprice_set.count() > 15:
                self.wbprice_ids_to_delete.extend(list(map(lambda x: x['pk'], self.batched_details_list[i].wbprice_set.order_by('-added_time')[14:].values('pk'))))
                self.wbprice_ids_to_delete.pop()


    @transaction.atomic
    def delete_notif_in_db(self):
        '''–ó–∞–Ω–µ—Å–µ–Ω–∏–µ –≤ –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è'''
        WBPrice.objects.filter(pk__in=self.wbprice_ids_to_delete).delete()