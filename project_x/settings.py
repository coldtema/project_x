"""
Django settings for project_x project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from datetime import timedelta


# Загружаем .env файл
load_dotenv()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

LOGIN_REDIRECT_URL  =  "/"
LOGOUT_REDIRECT_URL  =  "/"

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'apps.core.apps.CoreConfig',
    'apps.price_checker.apps.PriceCheckerConfig',
    'apps.wb_checker.apps.WbCheckerConfig',
    'apps.accounts.apps.AccountsConfig',
    'tailwind',
    'theme',
    'django_celery_results',
    # 'django_browser_reload',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    # 'django_browser_reload.middleware.BrowserReloadMiddleware',
]

ROOT_URLCONF = 'project_x.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project_x.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('POSTGRES_DB'),
        'USER': os.getenv('POSTGRES_USER'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
        'HOST': '127.0.0.1', #'db'
        'PORT': '5432',
    }
}


AUTH_USER_MODEL = 'accounts.CustomUser'

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "apps/price_checker/static/price_checker"),
    os.path.join(BASE_DIR, "apps/core/static/core"),
    os.path.join(BASE_DIR, "apps/core/static/js"),
    os.path.join(BASE_DIR, "theme/static/css/dist")
]

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
EMAIL_PORT = 587
EMAIL_USE_TLS = True



TAILWIND_APP_NAME = 'theme'
INTERNAL_IPS = [
    "127.0.0.1", 
]

NPM_BIN_PATH = r"C:\Program Files\nodejs\npm.cmd"


SLOTS_DICT = {
    'FREE': 20,
    'PLATINUM': 100,
    'ULTIMA': 1000
}


CELERY_BROKER_URL = 'redis://localhost:6379/0' 
CELERY_RESULT_BACKEND = 'django-db' #'redis://localhost:6379/0' 
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_EXTENDED = True
CELERY_BEAT_SCHEDULE = {
    #wb_checker
    'thirty_mins_update_single_prods_plus_make_notif':{
        'task': 'apps.wb_checker.tasks.update_single_prods_plus_make_notif',
        'schedule': 1800,
        },
    'one_day_update_menu_categories':{
        'task': 'apps.wb_checker.tasks.update_menu_categories',
        'schedule': timedelta(hours=24),
        },
    'six_hours_update_top_prods':{
        'task': 'apps.wb_checker.tasks.update_top_prods',
        'schedule': timedelta(hours=6),
        },
    'thirty_mins_update_top_prods_info':{
        'task': 'apps.wb_checker.tasks.update_top_prods_info',
        'schedule': 1800,
        },
    #price_checker
    'three_hours_update_all_price_checker':{
        'task': 'apps.price_checker.tasks.update_all_price_checker',
        'schedule': timedelta(hours=3),
        },
    #core
    'one_hour_clear_notifications':{
        'task': 'apps.core.tasks.clear_notifications',
        'schedule': timedelta(hours=1),
    },
    'one_minute_give_subs':{
        'task': 'apps.core.tasks.give_subs',
        'schedule': timedelta(minutes=1),
    },
    'one_day_cancel_subs':{
        'task': 'apps.core.tasks.cancel_subs',
        'schedule': timedelta(hours=24),
    }
}